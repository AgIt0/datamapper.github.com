<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
  <title>Datamapper.org News and Notes</title>
  <subtitle>Ruby Object Relational Mapper</subtitle>
  <link href="http://www.datamapper.org/news.rss" rel="self"/>
  <link href="http://www.datamapper.org/"/>
  <updated>2009-10-03T23:46:52-07:00</updated>
  <author>
    <name>Maintained By the Community</name>
    <email>datamapper@googlegroups.com</email>
  </author>
  <id>http://www.datamapper.org</id>
  
  <entry>
    <title>DataMapper 0.10 is Released</title>
    <link href="/articles/datamapper_010_released.html"/>
    <id>tag:datamapper.org,2009-09-15:1253028719</id>
    <updated>2009-09-15T08:31:59-07:00</updated>
    <content type="html">&lt;h1&gt;DataMapper 0.10 is Released&lt;/h1&gt;
&lt;p&gt;DataMapper 0.10 is ready for release.  We&amp;#8217;ve worked on it for the past 11 months, pushed 1250 commits, written 3000+ specs, and fixed 140 tickets in the process.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>DataMapper Presented at RailsConf 2008</title>
    <link href="/articles/datamapper_presented_at_railsconf08.html"/>
    <id>tag:datamapper.org,2008-06-10:1213119016</id>
    <updated>2008-06-10T10:30:16-07:00</updated>
    <content type="html">&lt;h1&gt;DataMapper Presented at RailsConf 2008&lt;/h1&gt;
&lt;p&gt;Yehuda Katz (wycats) gave an updated version of his &amp;#8220;DataMapper &amp;#8211; The Persistence Framework&amp;#8221; presentation at Rails Conf 2008.  Though video isn&amp;#8217;t available for the talk, he was nice enough to share his slides.&lt;/p&gt;
&lt;div style=&quot;width:425px;text-align:left; margin:0 auto;&quot; id=&quot;__ss_445593&quot;&gt;&lt;object style=&quot;margin:0px&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://static.slideshare.net/swf/ssplayer2.swf?doc=datamapper-1212540345128334-9&quot;/&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;/&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot;/&gt;&lt;embed src=&quot;http://static.slideshare.net/swf/ssplayer2.swf?doc=datamapper-1212540345128334-9&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;div style=&quot;font-size:11px;font-family:tahoma,arial;height:26px;padding-top:2px;&quot;&gt;&lt;a href=&quot;http://www.slideshare.net/?src=embed&quot;&gt;&lt;img src=&quot;http://static.slideshare.net/swf/logo_embd.png&quot; style=&quot;border:0px none;margin-bottom:-5px&quot; alt=&quot;SlideShare&quot;/&gt;&lt;/a&gt; | &lt;a href=&quot;http://www.slideshare.net/wycats/datamapper?src=embed&quot; title=&quot;View DataMapper on SlideShare&quot;&gt;View&lt;/a&gt; | &lt;a href=&quot;http://www.slideshare.net/upload?src=embed&quot;&gt;Upload your own&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;They&amp;#8217;re available for download and review direct from SlideShare at &lt;a href=&quot;http://www.slideshare.net/wycats/datamapper/&quot;&gt;http://www.slideshare.net/wycats/datamapper/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Adam French (afrench) was in attendance and participated in the &amp;#8216;Birds Of A Feather&amp;#8217; discussion panel on &lt;a href=&quot;http://en.oreilly.com/rails2008/public/schedule/detail/4426&quot;&gt;Rails Alternatives and You&lt;/a&gt; led by Mark Bates, of &lt;a href=&quot;http://www.mackframework.com&quot;&gt;www.mackframework.com&lt;/a&gt; fame.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>DataMapper 0.9 is Released</title>
    <link href="/articles/datamapper_090_released.html"/>
    <id>tag:datamapper.org,2008-05-27:1211875644</id>
    <updated>2008-05-27T01:07:24-07:00</updated>
    <content type="html">&lt;h1&gt;DataMapper 0.9 is Released&lt;/h1&gt;
&lt;p&gt;DataMapper 0.9 is ready for the world.  It brings with it a massive overhaul of the internals of DataMapper, a shift in terminology, a dramatic bump in speed, improved code-base organization, and support for more than just database data-stores.&lt;/p&gt;
&lt;p&gt;To install it:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;sudo gem install addressable english rspec
sudo gem install data_objects do_mysql do_postgres do_sqlite3
sudo gem install dm-core dm-more
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is NOT a backwards compatible release. Code written for DataMapper 0.3 will not function with DataMapper 0.9.* due to syntactical changes and library improvements.&lt;/p&gt;
&lt;p&gt;REPEAT: This is NOT a backwards compatible release.&lt;/p&gt;
&lt;table class=&quot;changeSummary&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
&lt;thead&gt;
    &lt;th&gt;&amp;nbsp;&lt;/th&gt;
    &lt;th&gt;DataMapper 0.3&lt;/th&gt;
    &lt;th&gt;DataMapper 0.9&lt;/th&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
      &lt;th&gt;Creating a class&lt;/th&gt;
&lt;td&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Post&lt;/span&gt; &amp;lt; &lt;span class=&quot;co&quot;&gt;DataMapper&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Post&lt;/span&gt;
  include &lt;span class=&quot;co&quot;&gt;DataMapper&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Resource&lt;/span&gt;
&lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
      &lt;th&gt;Keys&lt;/th&gt;
&lt;td&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Key was not mandatory&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Automatically added +id+ if missing&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Natural Key&lt;/span&gt;
property &lt;span class=&quot;sy&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:string&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;pc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Composite Key&lt;/span&gt;
property &lt;span class=&quot;sy&quot;&gt;:id&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:integer&lt;/span&gt;,  &lt;span class=&quot;sy&quot;&gt;:key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;pc&quot;&gt;true&lt;/span&gt;
property &lt;span class=&quot;sy&quot;&gt;:slug&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:string&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;pc&quot;&gt;true&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# keys are now mandatory&lt;/span&gt;
property &lt;span class=&quot;sy&quot;&gt;:id&lt;/span&gt;,   &lt;span class=&quot;co&quot;&gt;Serial&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Natural Key&lt;/span&gt;
property &lt;span class=&quot;sy&quot;&gt;:slug&lt;/span&gt;, &lt;span class=&quot;co&quot;&gt;String&lt;/span&gt;,  &lt;span class=&quot;sy&quot;&gt;:key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;pc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Composite Key&lt;/span&gt;
property &lt;span class=&quot;sy&quot;&gt;:id&lt;/span&gt;,   &lt;span class=&quot;co&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;pc&quot;&gt;true&lt;/span&gt;
property &lt;span class=&quot;sy&quot;&gt;:slug&lt;/span&gt;, &lt;span class=&quot;co&quot;&gt;String&lt;/span&gt;,  &lt;span class=&quot;sy&quot;&gt;:key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;pc&quot;&gt;true&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
      &lt;th&gt;Properties&lt;/th&gt;
&lt;td&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;property &lt;span class=&quot;sy&quot;&gt;:title&lt;/span&gt;,     &lt;span class=&quot;sy&quot;&gt;:string&lt;/span&gt;
property &lt;span class=&quot;sy&quot;&gt;:body&lt;/span&gt;,      &lt;span class=&quot;sy&quot;&gt;:text&lt;/span&gt;
property &lt;span class=&quot;sy&quot;&gt;:posted_on&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:datetime&lt;/span&gt;
property &lt;span class=&quot;sy&quot;&gt;:active&lt;/span&gt;,    &lt;span class=&quot;sy&quot;&gt;:boolean&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;property &lt;span class=&quot;sy&quot;&gt;:title&lt;/span&gt;,     &lt;span class=&quot;co&quot;&gt;String&lt;/span&gt;
property &lt;span class=&quot;sy&quot;&gt;:body&lt;/span&gt;,      &lt;span class=&quot;co&quot;&gt;Text&lt;/span&gt;
property &lt;span class=&quot;sy&quot;&gt;:posted_on&lt;/span&gt;, &lt;span class=&quot;co&quot;&gt;DateTime&lt;/span&gt;
property &lt;span class=&quot;sy&quot;&gt;:active&lt;/span&gt;,    &lt;span class=&quot;co&quot;&gt;Boolean&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
      &lt;th&gt;Associations&lt;/th&gt;
&lt;td&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;has_many &lt;span class=&quot;sy&quot;&gt;:comments&lt;/span&gt;
belongs_to &lt;span class=&quot;sy&quot;&gt;:blog&lt;/span&gt;
has_and_belongs_to_many &lt;span class=&quot;sy&quot;&gt;:categories&lt;/span&gt;
has_one &lt;span class=&quot;sy&quot;&gt;:author&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;has n, &lt;span class=&quot;sy&quot;&gt;:comments&lt;/span&gt;
belongs_to &lt;span class=&quot;sy&quot;&gt;:blog&lt;/span&gt;
has n, &lt;span class=&quot;sy&quot;&gt;:categories&lt;/span&gt; =&amp;gt; &lt;span class=&quot;co&quot;&gt;Resource&lt;/span&gt;
has &lt;span class=&quot;i&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:author&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
      &lt;th&gt;Finders&lt;/th&gt;
&lt;td&gt;
&lt;notextile&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&amp;lt;span class=&quot;co&quot;&amp;gt;Post&amp;lt;/span&amp;gt;.first &amp;lt;span class=&quot;sy&quot;&amp;gt;:order&amp;lt;/span&amp;gt; =&amp;amp;gt; &amp;lt;span class=&quot;s&quot;&amp;gt;&amp;lt;span class=&quot;dl&quot;&amp;gt;'&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;k&quot;&amp;gt;created_at DESC&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;dl&quot;&amp;gt;'&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span class=&quot;co&quot;&amp;gt;Post&amp;lt;/span&amp;gt;.all
  &amp;lt;span class=&quot;sy&quot;&amp;gt;:conditions&amp;lt;/span&amp;gt; =&amp;amp;gt; [ &amp;lt;span class=&quot;s&quot;&amp;gt;&amp;lt;span class=&quot;dl&quot;&amp;gt;'&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;k&quot;&amp;gt;active = ?&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;dl&quot;&amp;gt;'&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;, &amp;lt;span class=&quot;pc&quot;&amp;gt;true&amp;lt;/span&amp;gt; ]

database.query &amp;lt;span class=&quot;s&quot;&amp;gt;&amp;lt;span class=&quot;dl&quot;&amp;gt;'&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;k&quot;&amp;gt;SELECT 1&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;dl&quot;&amp;gt;'&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
database.execute &amp;lt;span class=&quot;s&quot;&amp;gt;&amp;lt;span class=&quot;dl&quot;&amp;gt;'&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;k&quot;&amp;gt;UPDATE posts...&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;dl&quot;&amp;gt;'&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
        &lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/notextile&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;notextile&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&amp;lt;span class=&quot;co&quot;&amp;gt;Post&amp;lt;/span&amp;gt;.first &amp;lt;span class=&quot;sy&quot;&amp;gt;:order&amp;lt;/span&amp;gt; =&amp;amp;gt; [ &amp;lt;span class=&quot;sy&quot;&amp;gt;:created_at&amp;lt;/span&amp;gt;.desc ]
&amp;lt;span class=&quot;co&quot;&amp;gt;Post&amp;lt;/span&amp;gt;.all
  &amp;lt;span class=&quot;sy&quot;&amp;gt;:conditions&amp;lt;/span&amp;gt; =&amp;amp;gt; [ &amp;lt;span class=&quot;s&quot;&amp;gt;&amp;lt;span class=&quot;dl&quot;&amp;gt;'&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;k&quot;&amp;gt;active = ?&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;dl&quot;&amp;gt;'&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;, &amp;lt;span class=&quot;pc&quot;&amp;gt;true&amp;lt;/span&amp;gt; ]

repository(&amp;lt;span class=&quot;sy&quot;&amp;gt;:default&amp;lt;/span&amp;gt;).adapter.query &amp;lt;span class=&quot;s&quot;&amp;gt;&amp;lt;span class=&quot;dl&quot;&amp;gt;'&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;k&quot;&amp;gt;SELECT 1&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;dl&quot;&amp;gt;'&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
repository(&amp;lt;span class=&quot;sy&quot;&amp;gt;:default&amp;lt;/span&amp;gt;).adapter.execute &amp;lt;span class=&quot;s&quot;&amp;gt;&amp;lt;span class=&quot;dl&quot;&amp;gt;'&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;k&quot;&amp;gt;UPDATE posts...&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;dl&quot;&amp;gt;'&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
        &lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/notextile&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
      &lt;th&gt;Validations&lt;/th&gt;
&lt;td&gt;
&lt;notextile&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;validates_presence_of     &amp;lt;span class=&quot;sy&quot;&amp;gt;:title&amp;lt;/span&amp;gt;
validates_numericality_of &amp;lt;span class=&quot;sy&quot;&amp;gt;:rating&amp;lt;/span&amp;gt;
validates_format_of       &amp;lt;span class=&quot;sy&quot;&amp;gt;:email&amp;lt;/span&amp;gt;,   &amp;lt;span class=&quot;sy&quot;&amp;gt;:with&amp;lt;/span&amp;gt; =&amp;amp;gt; &amp;lt;span class=&quot;sy&quot;&amp;gt;:email_address&amp;lt;/span&amp;gt;
validates_length_of       &amp;lt;span class=&quot;sy&quot;&amp;gt;:summary&amp;lt;/span&amp;gt;, &amp;lt;span class=&quot;sy&quot;&amp;gt;:within&amp;lt;/span&amp;gt; =&amp;amp;gt; (&amp;lt;span class=&quot;i&quot;&amp;gt;1&amp;lt;/span&amp;gt;..&amp;lt;span class=&quot;i&quot;&amp;gt;100&amp;lt;/span&amp;gt;)
validates_uniqueness_of   &amp;lt;span class=&quot;sy&quot;&amp;gt;:slug&amp;lt;/span&amp;gt;
        &lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/notextile&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;notextile&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;validates_present   &amp;lt;span class=&quot;sy&quot;&amp;gt;:title&amp;lt;/span&amp;gt;
validates_is_number &amp;lt;span class=&quot;sy&quot;&amp;gt;:rating&amp;lt;/span&amp;gt;
validates_format    &amp;lt;span class=&quot;sy&quot;&amp;gt;:email&amp;lt;/span&amp;gt;,   &amp;lt;span class=&quot;sy&quot;&amp;gt;:as&amp;lt;/span&amp;gt; =&amp;amp;gt; &amp;lt;span class=&quot;sy&quot;&amp;gt;:email_address&amp;lt;/span&amp;gt;
validates_length    &amp;lt;span class=&quot;sy&quot;&amp;gt;:summary&amp;lt;/span&amp;gt;, &amp;lt;span class=&quot;sy&quot;&amp;gt;:in&amp;lt;/span&amp;gt; =&amp;amp;gt; (&amp;lt;span class=&quot;i&quot;&amp;gt;1&amp;lt;/span&amp;gt;..&amp;lt;span class=&quot;i&quot;&amp;gt;100&amp;lt;/span&amp;gt;)
validates_is_unique &amp;lt;span class=&quot;sy&quot;&amp;gt;:slug&amp;lt;/span&amp;gt;
        &lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/notextile&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
      &lt;th&gt;Callbacks&lt;/th&gt;
&lt;td&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;before_save &lt;span class=&quot;sy&quot;&gt;:categorize&lt;/span&gt;

before_create &lt;span class=&quot;r&quot;&gt;do&lt;/span&gt; |post|
  &lt;span class=&quot;c&quot;&gt;# do stuff with post&lt;/span&gt;
&lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# return false to abort&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;before &lt;span class=&quot;sy&quot;&gt;:save&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:categorize&lt;/span&gt;

before &lt;span class=&quot;sy&quot;&gt;:create&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# do stuff with self&lt;/span&gt;
&lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# throw :halt to abort&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
  </entry>
  
  <entry>
    <title>The Stunningly Easy Way to Live On The Edge Of DataMapper</title>
    <link href="/articles/stunningly_easy_way_to_live_on_the_edge.html"/>
    <id>tag:datamapper.org,2008-05-07:1210205074</id>
    <updated>2008-05-07T17:04:34-07:00</updated>
    <content type="html">&lt;h1&gt;The Stunningly Easy Way to Live On The Edge Of DataMapper&lt;/h1&gt;
&lt;p&gt;DataMapper is organized into sub-projects, much like &lt;a href=&quot;http://www.merbivore.com&quot;&gt;Merb&lt;/a&gt;, and that tends to confuse even the people working on it&amp;#8230;.until recently.  Michael Ivey, an active contributer to the Merb project, and our very own Dan Kubb have collaborated on a set of Sake tasks to help automate and streamline checking out, packaging, installing, uninstalling, updating, repackaging, and reinstalling the DataMapper and Merb projects.&lt;/p&gt;
&lt;p&gt;If you like to live life on the edge, this is the happiest way to do it.&lt;/p&gt;
&lt;h3&gt;Step 0 &amp;#8211; The Setup&lt;/h3&gt;
&lt;p&gt;A couple of very basic requirements before we begin.  First, you&amp;#8217;ll need to have an up-to-date installation of &lt;a href=&quot;http://www.rubygems.org/&quot;&gt;Rubygems&lt;/a&gt;, the Ruby package management system.  To check what version you have do:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; gem --version
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If you aren&amp;#8217;t on 1.2.x, update by running&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; sudo gem update --system
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Next, you&amp;#8217;ll need &lt;code&gt;git&lt;/code&gt;.  It&amp;#8217;s the source code management tool DataMapper uses.  Its installation is left up to the reader, but here&amp;#8217;s a few good resources to go to for help:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://git.or.cz/&quot;&gt;Git &amp;#8211; Fast Version Control System&lt;/a&gt; &amp;#8211; Homepage&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://dysinger.net/2007/12/30/installing-git-on-mac-os-x-105-leopard/&quot;&gt;Installing GIT on MAC OSX 10.5 Leopard&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://ropiku.wordpress.com/2007/12/28/git-on-windows/&quot;&gt;Git On Windows&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://chrisolsen.org/2008/03/10/installing-git-on-ubuntu/&quot;&gt;Installing Git on Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After that, you&amp;#8217;ll need to &lt;code&gt;gem uninstall&lt;/code&gt; any of the &amp;#8220;dm-*&amp;#8221; projects you already have installed.  This includes &amp;#8216;data_objects&amp;#8217; and its associated adapters.&lt;/p&gt;
&lt;p&gt;Next, you&amp;#8217;ll need a few of the base dependencies.  To install them, run&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;sudo gem install addressable english rspec
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Once that&amp;#8217;s done, do the following:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; mkdir -p ~/src
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt; cd ~/src
&lt;/pre&gt;
&lt;/div&gt;
&lt;h3&gt;Step 1 &amp;#8211; Have Some Sake&lt;/h3&gt;
&lt;p&gt;No, not the wonderful alcoholic beverage, the &lt;a href=&quot;http://errtheblog.com/posts/60-sake-bomb&quot;&gt;system-wide rake tasks library&lt;/a&gt; by &lt;a href=&quot;http://errtheblog.com/&quot;&gt;PJ Hyett and Chris Wanstrath of Err. The Blog&lt;/a&gt;.  Ivey&amp;#8217;s and dkubb&amp;#8217;s automated installation and reinstallation scripts are written as sake tasks, so you&amp;#8217;ll need it installed on your machine.&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; sudo gem install sake
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Once you&amp;#8217;re done, you should be able to see sake in your path by executing &lt;code&gt;which sake&lt;/code&gt; and see where &lt;code&gt;gem&lt;/code&gt; installed it.&lt;/p&gt;
&lt;h3&gt;Step 2 &amp;#8211; Install the Tasks&lt;/h3&gt;
&lt;p&gt;Now that you&amp;#8217;re all setup with sake and the &lt;code&gt;src&lt;/code&gt; directory, it&amp;#8217;s time to install the sake tasks.  They can be found at &lt;a href=&quot;http://github.com/dkubb/dm-dev/&quot;&gt;http://github.com/dkubb/dm-dev/&lt;/a&gt; and are very easily installed by doing:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; sake -i http://github.com/dkubb/dm-dev/raw/master/dm-dev.sake
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The tasks that get installed are available for perusal by issuing &lt;code&gt;sake -T&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;er&quot;&gt;$&lt;/span&gt; sake -&lt;span class=&quot;co&quot;&gt;T&lt;/span&gt;
sake dm&lt;span class=&quot;sy&quot;&gt;:clone&lt;/span&gt;                          &lt;span class=&quot;c&quot;&gt;# Clone a copy of the DataMapper repository and dependencies&lt;/span&gt;
sake dm&lt;span class=&quot;sy&quot;&gt;:gems&lt;/span&gt;&lt;span class=&quot;sy&quot;&gt;:refresh&lt;/span&gt;                   &lt;span class=&quot;c&quot;&gt;# Pull fresh copies of DataMapper and refresh all the gems&lt;/span&gt;
sake dm&lt;span class=&quot;sy&quot;&gt;:gems&lt;/span&gt;&lt;span class=&quot;sy&quot;&gt;:wipe&lt;/span&gt;                      &lt;span class=&quot;c&quot;&gt;# Uninstall all RubyGems related to DataMapper&lt;/span&gt;
sake dm&lt;span class=&quot;sy&quot;&gt;:install&lt;/span&gt;                        &lt;span class=&quot;c&quot;&gt;# Install dm-core, dm-more and do&lt;/span&gt;
sake dm&lt;span class=&quot;sy&quot;&gt;:install&lt;/span&gt;&lt;span class=&quot;sy&quot;&gt;:core&lt;/span&gt;                   &lt;span class=&quot;c&quot;&gt;# Install dm-core&lt;/span&gt;
sake dm&lt;span class=&quot;sy&quot;&gt;:install&lt;/span&gt;&lt;span class=&quot;sy&quot;&gt;:do&lt;/span&gt;                     &lt;span class=&quot;c&quot;&gt;# Install do drivers&lt;/span&gt;
sake dm&lt;span class=&quot;sy&quot;&gt;:install&lt;/span&gt;&lt;span class=&quot;sy&quot;&gt;:do&lt;/span&gt;&lt;span class=&quot;sy&quot;&gt;:data_objects&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;# Install data_objects&lt;/span&gt;
sake dm&lt;span class=&quot;sy&quot;&gt;:install&lt;/span&gt;&lt;span class=&quot;sy&quot;&gt;:do&lt;/span&gt;&lt;span class=&quot;sy&quot;&gt;:mysql&lt;/span&gt;               &lt;span class=&quot;c&quot;&gt;# Install do_mysql&lt;/span&gt;
sake dm&lt;span class=&quot;sy&quot;&gt;:install&lt;/span&gt;&lt;span class=&quot;sy&quot;&gt;:do&lt;/span&gt;&lt;span class=&quot;sy&quot;&gt;:postgres&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;# Install do_postgres&lt;/span&gt;
sake dm&lt;span class=&quot;sy&quot;&gt;:install&lt;/span&gt;&lt;span class=&quot;sy&quot;&gt;:do&lt;/span&gt;&lt;span class=&quot;sy&quot;&gt;:sqlite3&lt;/span&gt;             &lt;span class=&quot;c&quot;&gt;# Install do_sqlite3&lt;/span&gt;
sake dm&lt;span class=&quot;sy&quot;&gt;:install&lt;/span&gt;&lt;span class=&quot;sy&quot;&gt;:more&lt;/span&gt;                   &lt;span class=&quot;c&quot;&gt;# Install dm-more&lt;/span&gt;
sake dm&lt;span class=&quot;sy&quot;&gt;:install&lt;/span&gt;&lt;span class=&quot;sy&quot;&gt;:more&lt;/span&gt;&lt;span class=&quot;sy&quot;&gt;:merb_datamapper&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# Install merb_datamapper&lt;/span&gt;
sake dm&lt;span class=&quot;sy&quot;&gt;:sake&lt;/span&gt;&lt;span class=&quot;sy&quot;&gt;:refresh&lt;/span&gt;                   &lt;span class=&quot;c&quot;&gt;# Remove and reinstall DataMapper sake recipes&lt;/span&gt;
sake dm&lt;span class=&quot;sy&quot;&gt;:update&lt;/span&gt;                         &lt;span class=&quot;c&quot;&gt;# Update your local DataMapper.  Run from inside the top-level dm dir&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;h3&gt;Step 3 &amp;#8211; Live a little&lt;/h3&gt;
&lt;p&gt;Change directories into the &lt;code&gt;src&lt;/code&gt; directory and run &lt;code&gt;sake dm:clone&lt;/code&gt;.  You&amp;#8217;ll see git cloning DataMapper Core, DataMapper More, and DataObjects from their respective repositories on GitHub.  When that&amp;#8217;s done, &lt;code&gt;cd dm&lt;/code&gt; and have a look around.&lt;/p&gt;
&lt;p&gt;When your ready, return to &lt;code&gt;~/src/dm&lt;/code&gt; and issue &lt;code&gt;sake dm:install&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;All Together Now&lt;/h3&gt;
&lt;p&gt;When executed together, these 3 steps amount to 7 lines at the command line.  Talk about stunningly easy.&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; mkdir -p ~/src
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt; cd ~/src
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; sudo gem install sake
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt; sake -i http://github.com/dkubb/dm-dev/raw/master/dm-dev.sake
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt; sake dm:clone
&lt;span class=&quot;no&quot;&gt;6&lt;/span&gt; cd dm
&lt;span class=&quot;no&quot;&gt;7&lt;/span&gt; sake dm:install
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Changes happen to DataMapper and it&amp;#8217;s buddies all the time.  To refresh your installation of DataMapper and DataObjects, return to &lt;code&gt;~/src/dm&lt;/code&gt; and issue:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; sake dm:gems:refresh
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;It will uninstall your local gems, pull down fresh changes from github, and reinstall the gems again.&lt;/p&gt;
&lt;p&gt;On a side note, checkout &lt;a href=&quot;http://merbivore.com/merb-dev.sake&quot;&gt;http://merbivore.com/merb-dev.sake&lt;/a&gt; for the original merb related sake tasks by Michael Ivey wrote that these came from.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>DataMapper Presented at MWRC 2008</title>
    <link href="/articles/datamapper_talk_atmwrc08.html"/>
    <id>tag:datamapper.org,2008-04-10:1207886859</id>
    <updated>2008-04-10T21:07:39-07:00</updated>
    <content type="html">&lt;h1&gt;DataMapper Presented at MWRC 2008&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://mwrc2008.confreaks.com/04katz.html&quot; style=&quot;border:10px; color:#FFF; text-decoration:none;&quot;&gt;&lt;img src=&quot;/images/wykatz_at_mwrc2008.png&quot; title=&quot;Yehuda Katz&amp;#39; presentation entitled &amp;#39;Faster, Better ORM With DataMapper&quot; alt=&quot;Yehuda Katz&amp;#39; presentation entitled &amp;#39;Faster, Better ORM With DataMapper&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At this year&amp;#8217;s &lt;a href=&quot;http://mtnwestrubyconf.org/&quot;&gt;Mountain West Ruby Conference 2008&lt;/a&gt;, DataMapper&amp;#8217;s own Yehuda Katz gave a presentation entitled &amp;#8220;Faster, Better ORM With DataMapper.&amp;#8221;&lt;/p&gt;
&lt;p&gt;The video of the talk is available for viewing and downloading at &lt;a href=&quot;http://mwrc2008.confreaks.com/04katz.html&quot;&gt;http://mwrc2008.confreaks.com/04katz.html&lt;/a&gt; and is brought to you by the good people at &lt;a href=&quot;http://confreaks.com&quot;&gt;confreaks.com&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Spotlight on... Laziness</title>
    <link href="/articles/spotlight_on_laziness.html"/>
    <id>tag:datamapper.org,2008-04-03:1207282092</id>
    <updated>2008-04-03T21:08:12-07:00</updated>
    <content type="html">&lt;h1&gt;Spotlight on&amp;#8230; Laziness&lt;/h1&gt;
&lt;p&gt;Laziness.  It means &amp;#8220;an unwillingness to work or use energy&amp;#8221; and typically indicates that the dishes don&amp;#8217;t get washed after lunch, the bath tub doesn&amp;#8217;t get cleaned, and the trash sits around an extra few days and stinks up the place.&lt;/p&gt;
&lt;p&gt;But that very same definition in software takes on a whole new meaning: To avoid doing work you don&amp;#8217;t have to do for as long as you can avoid it; sometimes never doing it at all.  It&amp;#8217;s a good thing. It means that expensive and slow tasks can be put off until the very last cycle possible and thus only incur their cost when it really is worth it. Maybe you never execute the code at all.&lt;/p&gt;
&lt;p&gt;You could put off running a specific subroutine because it&amp;#8217;s slow, or because it locks a file that might be needed elsewhere, or because instantiating the resulting object eats up RAM.  Either way, deferring execution of a block of code until the very last possible moment can be the difference between a snappy application that rarely slows down and a slow application that rarely speeds up.&lt;/p&gt;
&lt;p&gt;But laziness isn&amp;#8217;t without its hidden costs.  If you put off everything to the very last moment, you forfeit the opportunity to do more than one thing at a time, and likely create more work for yourself, rather than less.&lt;/p&gt;
&lt;p&gt;So where&amp;#8217;s the balance?&lt;/p&gt;
&lt;p&gt;Ultimately, it depends on your application. The tools you use should offer you the flexibility you need to design your application optimally.  Every system, after all, is unique and breaks the mold of systems before it.&lt;/p&gt;
&lt;p&gt;This brings us to DataMapper.&lt;/p&gt;
&lt;h2&gt;Lazy-loading attributes&lt;/h2&gt;
&lt;p&gt;You likely already know that DataMapper supports lazy properties.&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Post&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   include &lt;span class=&quot;co&quot;&gt;DataMapper&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Resource&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt;   property &lt;span class=&quot;sy&quot;&gt;:id&lt;/span&gt;,    &lt;span class=&quot;co&quot;&gt;Serial&lt;/span&gt;                  &lt;span class=&quot;c&quot;&gt;# auto_incrementing primary key&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt;   property &lt;span class=&quot;sy&quot;&gt;:title&lt;/span&gt;, &lt;span class=&quot;co&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:lazy&lt;/span&gt; =&amp;gt; &lt;span class=&quot;pc&quot;&gt;true&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# intentionally lazy&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;6&lt;/span&gt;   property &lt;span class=&quot;sy&quot;&gt;:body&lt;/span&gt;,  &lt;span class=&quot;co&quot;&gt;Text&lt;/span&gt;                    &lt;span class=&quot;c&quot;&gt;# lazy by default&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In this case, we&amp;#8217;re intentionally marking this Post&amp;#8217;s &lt;code&gt;:title&lt;/code&gt; property as lazy, as well as letting the &lt;code&gt;:body&lt;/code&gt; be lazy by default.  If we go and inspect our query log for the retrieval of a post with the ID of 1, we see&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;SELECT `id` FROM `posts` WHERE `id` = 1
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;DataMapper didn&amp;#8217;t request the two lazy columns.  But when we call &lt;code&gt;.title&lt;/code&gt; off of our post, we suddenly see&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;SELECT `title` FROM `posts` WHERE `id` = 1
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is the very definition of a lazy-loaded property;  The lazy column didn&amp;#8217;t get requested from our data store until we actually needed it, and no sooner.&lt;/p&gt;
&lt;p&gt;But this is just for one individual instance of a post.  How does this behave when we have a collection of posts and iteratively call the &lt;code&gt;.title&lt;/code&gt; method?&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;SELECT `title` FROM `posts` WHERE `id` IN (1, 2, 3, 4, 5)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;DataMapper loaded up the title for all of the posts in our collection in one query.  It didn&amp;#8217;t issue the lazy-load retrieval from above over and over for each individual post, nor did it chicken out and issue the lazy-load retrieval for ALL of the posts in the data store.&lt;/p&gt;
&lt;p&gt;When you retrieve a set of results using DataMapper&amp;#8217;s &lt;code&gt;.all&lt;/code&gt;, each instance it returns knows about the others in the result set, which makes it brutally simple to issue just one lazy-load retrieval of &lt;code&gt;:title&lt;/code&gt;, and thus solving the n+1 query problem without having to do anything special in the initial retrieval.&lt;/p&gt;
&lt;h2&gt;Contextual Lazy-loading&lt;/h2&gt;
&lt;p&gt;With a recent commit by &lt;a href=&quot;http://www.guyvdb.info/ruby/lazy-loading-properties-in-datamapper/&quot;&gt;Guy van den Berg&lt;/a&gt;, DataMapper just got a whole lot more flexible.&lt;/p&gt;
&lt;p&gt;Most applications have only a few main views of a resource: a brief summary view used in listing results, a complete representation that might appear on a show page and a comprehensive view for when someone is editing something and needs access to metadata.  Wouldn&amp;#8217;t it be nice to lump all of the lazy-load retrieval queries into one query which loads up multiple lazy properties, rather than query after query for each lazy property as you call them?&lt;/p&gt;
&lt;p&gt;DataMapper now does this!&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Post&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   include &lt;span class=&quot;co&quot;&gt;DataMapper&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Resource&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt;   property &lt;span class=&quot;sy&quot;&gt;:id&lt;/span&gt;,    &lt;span class=&quot;co&quot;&gt;Serial&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt;   property &lt;span class=&quot;sy&quot;&gt;:title&lt;/span&gt;, &lt;span class=&quot;co&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:lazy&lt;/span&gt; =&amp;gt; [ &lt;span class=&quot;sy&quot;&gt;:summary&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:brief&lt;/span&gt; ]
&lt;span class=&quot;no&quot;&gt;6&lt;/span&gt;   property &lt;span class=&quot;sy&quot;&gt;:body&lt;/span&gt;,  &lt;span class=&quot;co&quot;&gt;Text&lt;/span&gt;,   &lt;span class=&quot;sy&quot;&gt;:lazy&lt;/span&gt; =&amp;gt; [ &lt;span class=&quot;sy&quot;&gt;:summary&lt;/span&gt; ]
&lt;span class=&quot;no&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So now, when you load an attribute with the &lt;code&gt;:summary&lt;/code&gt; context, DataMapper will load up all of the other lazy-loaded properties marked &lt;code&gt;:summary&lt;/code&gt; in one query to the data store.&lt;/p&gt;
&lt;p&gt;In your query log, you&amp;#8217;ll see:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; -- initial load
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt; SELECT `id` FROM `posts`
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt; -- lazy-loading of multiple properties in a given context in one query
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt; SELECT `id`, `title`, `body` FROM `posts`
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If you use this wisely, it would mean that DataMapper will never load more than it needs nor will it ever fire off more than the absolutely necessary amount of queries to get the job done.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s lazy ;-)&lt;/p&gt;
&lt;h2&gt;Strategic Eager Loading&lt;/h2&gt;
&lt;p&gt;Well, not for everything.&lt;/p&gt;
&lt;p&gt;Returning for a little bit to our &amp;#8220;loaded set&amp;#8221; discussion from above, every item you pull out of the data store is aware of any other item that got pulled along with it.  This is a very powerful feature which lets DataMapper defeat n+1 query problems when dealing with associations as well as lazy-loading of properties.&lt;/p&gt;
&lt;p&gt;For example, this is a severe &amp;#8220;no no&amp;#8221; in ActiveRecord:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;Zoo&lt;/span&gt;.find(&lt;span class=&quot;sy&quot;&gt;:all&lt;/span&gt;).each &lt;span class=&quot;r&quot;&gt;do&lt;/span&gt; |zoo|
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;     zoo.animals
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is a very bad idea because the ORM must query the &amp;#8220;animals&amp;#8221; table over and over again to load the association for each iteration.  It&amp;#8217;s far better to use &lt;code&gt;Zoo.find(:all, :include =&amp;gt; [ :animals ]).each {}&lt;/code&gt; because a JOIN occurs and everything is retrieved in 1 query.&lt;/p&gt;
&lt;p&gt;But the same issue doesn&amp;#8217;t exist in DataMapper. Each instance is aware of the other instances it was retrieved with.  The same iterator example from above only fires off 2 queries as you&amp;#8217;re iterating and calling the association inside the &lt;code&gt;each&lt;/code&gt;.  If you forget to &lt;code&gt;:include =&amp;gt; [ :association ]&lt;/code&gt; in the initial query, DataMapper only ever fires off one more query to get what it needs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.yehudakatz.com/&quot;&gt;Yehuda Katz&lt;/a&gt; has aptly named this &amp;#8216;Strategic Eager Loading&amp;#8217;.&lt;/p&gt;
&lt;h2&gt;Getting Around to It&lt;/h2&gt;
&lt;p&gt;A conclusion for our talk about laziness will be written whenever I get around to it.&lt;/p&gt;
&lt;p&gt;For now, just remember that DataMapper embraces lazy-loading, yet isn&amp;#8217;t overly zealous when the lazy properties are finally retrieved.  It also fills associations strategically, and assumes you&amp;#8217;re going to iterate over the set of results.  You don&amp;#8217;t have to catch yourself when you write an iterator because DataMapper loads associations for all of your items in the set, rather than on a one-by-one basis.&lt;/p&gt;
&lt;p&gt;And, most importantly, you can avoid doing work you don&amp;#8217;t have to do for as long as you can avoid it.&lt;/p&gt;
&lt;div class=&quot;puff&quot;&gt;
&lt;h2&gt;Contribute a &amp;#8220;Spotlight On&amp;#8230;&amp;#8221; Article&lt;/h2&gt;
&lt;p&gt;Got something important to say?  Want something explained a little&lt;br&gt;
better or demonstrated? Contribute or request a &amp;#8220;Spotlight On&amp;#8230;&amp;#8221; &lt;br&gt; article!&lt;br /&gt;
Email the &lt;a href=&quot;http://groups.google.com/group/datamapper&quot;&gt;DataMapper Mailing List&lt;/a&gt; with the request or &lt;br&gt;
contribution and we&amp;#8217;ll post it here.&lt;/p&gt;
&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>Spotlight on... Composite Keys</title>
    <link href="/articles/spotlight_on_cpk.html"/>
    <id>tag:datamapper.org,2008-03-29:1206835747</id>
    <updated>2008-03-29T17:09:07-07:00</updated>
    <content type="html">&lt;h1&gt;Spotlight on&amp;#8230; Composite Keys&lt;/h1&gt;
&lt;p&gt;For those of us who have taken a course on database design in college or university, you may have run across a concept called &amp;#8216;Composite Primary Keys&amp;#8217; (or sometimes &amp;#8216;Compound Keys&amp;#8217; or &amp;#8216;Concatenated Keys&amp;#8217;, and abbreviated &lt;acronym title=&quot;Composite Primary Keys&quot;&gt;CPK&lt;/acronym&gt;s).  It&amp;#8217;s usually right before you tackle JOINs and right after you fight with the &amp;#8220;surrogate key&amp;#8221; or &amp;#8220;primary key&amp;#8221; concept.&lt;/p&gt;
&lt;p&gt;Boiling &lt;acronym title=&quot;Composite Primary Keys&quot;&gt;CPK&lt;/acronym&gt;s down, they&amp;#8217;re just a way of identifying a row by multiple keys rather than one.  So instead of an auto_incrementing &amp;#8220;serial&amp;#8221; primary key (as in &lt;code&gt;id&lt;/code&gt;), you&amp;#8217;d have a combination of &lt;code&gt;some_column&lt;/code&gt; and &lt;code&gt;some_other_column&lt;/code&gt; that would uniquely identify a row.&lt;/p&gt;
&lt;p&gt;&lt;acronym title=&quot;Composite Primary Keys&quot;&gt;CPK&lt;/acronym&gt;s aren&amp;#8217;t as prevalent in the Rails world as Serial Keys (such as the auto-incrementing &lt;code&gt;:id&lt;/code&gt; column), but if you&amp;#8217;re going to support legacy, integration or reporting databases or just de-normalized schemas for performance reasons, they can be invaluable. So sure, Surrogate Keys are a great convenience, but sometimes they just aren&amp;#8217;t an option.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s briefly take a look at how a few ruby ORMs support Composite Primary Keys and then we&amp;#8217;ll talk about DataMapper&amp;#8217;s support for &lt;acronym title=&quot;Composite Primary Keys&quot;&gt;CPK&lt;/acronym&gt;s.&lt;/p&gt;
&lt;h2&gt;ActiveRecord&lt;/h2&gt;
&lt;p&gt;In short, ActiveRecord doesn&amp;#8217;t support &lt;acronym title=&quot;Composite Primary Keys&quot;&gt;CPK&lt;/acronym&gt;s without the help of an external library.  &lt;a href=&quot;http://drnicwilliams.com/about/&quot;&gt;Dr. Nic Williams&lt;/a&gt; &lt;a href=&quot;http://compositekeys.rubyforge.org/&quot;&gt;Composite Keys&lt;/a&gt; is an effort to overcome this limitation.&lt;/p&gt;
&lt;h2&gt;Sequel&lt;/h2&gt;
&lt;p&gt;Unlike ActiveRecord, Sequel supports &lt;acronym title=&quot;Composite Primary Keys&quot;&gt;CPK&lt;/acronym&gt;s natively:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Post&lt;/span&gt; &amp;lt; &lt;span class=&quot;co&quot;&gt;Sequel&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Model&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;2&lt;/span&gt;   set_primary_key [ &lt;span class=&quot;sy&quot;&gt;:category&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:title&lt;/span&gt; ]
&lt;span class=&quot;no&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;4&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;5&lt;/span&gt; post = &lt;span class=&quot;co&quot;&gt;Post&lt;/span&gt;.get(&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;hello world&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt;6&lt;/span&gt; post.key &lt;span class=&quot;c&quot;&gt;# =&amp;gt; [ 'ruby', 'hello world' ]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p class=&quot;attribution&quot;&gt;example compiled from &lt;a href=&quot;http://code.google.com/p/ruby-sequel/wiki/SequelModels&quot;&gt;http://code.google.com/p/ruby-sequel/wiki/SequelModels&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;DataMapper&lt;/h2&gt;
&lt;p&gt;The latest DataMapper was designed from the ground up to support &lt;acronym title=&quot;Composite Primary Keys&quot;&gt;CPK&lt;/acronym&gt;s:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Pig&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt;   include &lt;span class=&quot;co&quot;&gt;DataMapper&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Resource&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt;   property &lt;span class=&quot;sy&quot;&gt;:id&lt;/span&gt;,   &lt;span class=&quot;co&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;sy&quot;&gt;:key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;pc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt;   property &lt;span class=&quot;sy&quot;&gt;:slug&lt;/span&gt;, &lt;span class=&quot;co&quot;&gt;String&lt;/span&gt;,  &lt;span class=&quot;sy&quot;&gt;:key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;pc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt;   property &lt;span class=&quot;sy&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;co&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt; pig = &lt;span class=&quot;co&quot;&gt;Pig&lt;/span&gt;.get(&lt;span class=&quot;i&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Porky&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;no&quot;&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;11&lt;/span&gt; pig.key &lt;span class=&quot;c&quot;&gt;# =&amp;gt; [ 1, 'Wilbur' ]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We declared our keys by adding the &lt;code&gt;:key =&amp;gt; true&lt;/code&gt; to the appropriate properties. The order is important as it will determine the order keys are addressed throughout the system.&lt;/p&gt;
&lt;p&gt;Next, we mixed and matched the keys&amp;#8217; types.  &lt;code&gt;:id&lt;/code&gt; is a Integer, but &lt;code&gt;:slug&lt;/code&gt; is a String. DataMapper didn&amp;#8217;t flinch when we defined a key column as a String because it supports &lt;a href=&quot;http://en.wikipedia.org/wiki/Natural_key&quot;&gt;Natural Keys&lt;/a&gt; as well.&lt;/p&gt;
&lt;p&gt;Lastly, when retrieving rows via &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;[]&lt;/code&gt; with a &lt;acronym title=&quot;Composite Primary Keys&quot;&gt;CPK&lt;/acronym&gt;, we supplied the keys in the order they were defined within our model.  For example, we defined &lt;code&gt;:id&lt;/code&gt; first, then &lt;code&gt;:slug&lt;/code&gt; second; later, we retrieved Porky by specifying his &lt;code&gt;:id&lt;/code&gt; and &lt;code&gt;:slug&lt;/code&gt; in the same order.  Additionally, when we asked Wilbur for his keys, he handed us an array in the order the keys were defined.&lt;/p&gt;
&lt;p&gt;We didn&amp;#8217;t need to mix in an external library to get support for &lt;acronym title=&quot;Composite Primary Keys&quot;&gt;CPK&lt;/acronym&gt;s, nor did we need to call a &lt;code&gt;set_primary_key&lt;/code&gt; method and then supply more than one key to it. DataMapper supports Composite Primary Keys intuitively and without compromise!&lt;/p&gt;
&lt;p&gt;In later &amp;#8220;Spotlight On&amp;#8230;&amp;#8221; articles, we&amp;#8217;ll examine and demonstrate other DataMapper features or persistence concepts as well as compare similar features with other ORMs or libraries.&lt;/p&gt;
&lt;p&gt;h2(newRelease). Contribute a &amp;#8220;Spotlight On&amp;#8230;&amp;#8221; Article&lt;/p&gt;
&lt;p&gt;p(newRelease).  Got something important to say?  Want something explained a little&lt;br&gt;
better or demonstrated? Contribute or request a &amp;#8220;Spotlight On&amp;#8230;&amp;#8221; &lt;br&gt; article!&lt;br /&gt;
Email the &lt;a href=&quot;http://groups.google.com/group/datamapper&quot;&gt;DataMapper Mailing List&lt;/a&gt; with the request or &lt;br&gt;
contribution and we&amp;#8217;ll post it here.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>The Great Refactoring</title>
    <link href="/articles/the_great_refactoring.html"/>
    <id>tag:datamapper.org,2008-03-22:1206219350</id>
    <updated>2008-03-22T13:55:50-07:00</updated>
    <content type="html">&lt;h1&gt;The Great Refactoring&lt;/h1&gt;
&lt;p&gt;&amp;#8220;Tip&amp;#8221; DataMapper (hosted on &lt;a href=&quot;http://github.com/datamapper/dm-core&quot;&gt;github&lt;/a&gt;) is going through a dramatic re-factor.  Here&amp;#8217;s a quick summary of the anticipated NEW public API.&lt;/p&gt;
&lt;h2&gt;Not Just for Databases Anymore&lt;/h2&gt;
&lt;p&gt;DataMapper&amp;#8217;s class terminology will change and &amp;#8216;de-couple&amp;#8217; itself from database-specific terminology.  Gone are &amp;#8220;database&amp;#8221;, &amp;#8220;table&amp;#8221;, &amp;#8220;column&amp;#8221; and &amp;#8220;join&amp;#8221;.  Say hello to &amp;#8220;Repository&amp;#8221;, &amp;#8220;Resource&amp;#8221;, &amp;#8220;Property&amp;#8221;, and &amp;#8220;Link&amp;#8221;.&lt;/p&gt;
&lt;p&gt;&amp;#8220;Why would you want to do that?&amp;#8221;, you ask. Ultimately it&amp;#8217;s because DataMapper will soon support different types of persistence layers, not just databases.  It&amp;#8217;ll talk to all sorts of things like web services (REST and such), XML files, YAML files, non-relational databases, even custom file-types or services of your own design.  Just implement an Adapter that conforms to a certain API and DataMapper could support any type of data store.  No need for a completely separate library or anything.&lt;/p&gt;
&lt;p&gt;As an added benefit, DataMapper become more &amp;#8220;RESTful&amp;#8221;. &lt;a href=&quot;http://tomayko.com/writings/rest-to-my-wife&quot;&gt;Ryan Tomayko&lt;/a&gt; has a very good explanation of REST that all should read entitled &lt;a href=&quot;http://tomayko.com/writings/rest-to-my-wife&quot;&gt;How I Explained REST to My Wife&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Model Definitions Are a Little Different&lt;/h2&gt;
&lt;p&gt;Since we&amp;#8217;re changing up the terminology, model definitions are going to change up a little bit.  Here&amp;#8217;s what a Planet model would look like using the new API:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;no&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;cl&quot;&gt;Planet&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 2&lt;/span&gt;   include &lt;span class=&quot;co&quot;&gt;DataMapper&lt;/span&gt;::&lt;span class=&quot;co&quot;&gt;Resource&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 4&lt;/span&gt;   resource_names[&lt;span class=&quot;sy&quot;&gt;:legacy&lt;/span&gt;] = &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;dying_planets&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 5&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt; 6&lt;/span&gt;   property &lt;span class=&quot;sy&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;co&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 7&lt;/span&gt;   property &lt;span class=&quot;sy&quot;&gt;:age&lt;/span&gt;,  &lt;span class=&quot;co&quot;&gt;Integer&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 8&lt;/span&gt;   property &lt;span class=&quot;sy&quot;&gt;:core&lt;/span&gt;, &lt;span class=&quot;co&quot;&gt;String&lt;/span&gt;,  &lt;span class=&quot;sy&quot;&gt;:private&lt;/span&gt; =&amp;gt; &lt;span class=&quot;pc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;r&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;A couple of things are going on here.  First, DataMapper::Base and DataMapper::Persistence are gone and replaced with &lt;a href=&quot;http://datamapper.rubyforge.org/DataMapper/Resource.html&quot;&gt;DataMapper::Resource&lt;/a&gt;.  Next &lt;code&gt;set_table_name&lt;/code&gt; has been replaced with &lt;code&gt;resource_names&lt;/code&gt; hash where you specify which arena play occurs in. After that we have a couple of Property definitions that look a little different.&lt;/p&gt;
&lt;p&gt;First off, Properties will no longer take &lt;code&gt;:symbols&lt;/code&gt; for their types and instead take real constants like String, Integer, DateTime.  Also on the docket are the ability to define your own custom types.&lt;/p&gt;
&lt;p&gt;Think about that for a minute.  If developers are able to define their own custom types with their own materialization and serialization methods, DataMapper will be able to support all kinds of wild data-types like GIS information, network information, marshaled objects, JSON&amp;#8230;pretty much anything a developer might need, or want.&lt;/p&gt;
&lt;h2&gt;A Command-Line Interface&lt;/h2&gt;
&lt;p&gt;Taking a lesson from web frameworks, DataMapper will sport an interactive command-line so that you can browse your resources without the need to load up the entire environment of your application.  Here&amp;#8217;s an example session:&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;1&lt;/span&gt; $ dm mysql://root@localhost/great_musicians # connecting to a repository
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;An IRB session boots up&amp;#8230;&lt;/p&gt;
&lt;div class=&quot;CodeRay&quot;&gt;
&lt;pre&gt;&amp;gt;&amp;gt; the_king = &lt;span class=&quot;co&quot;&gt;Person&lt;/span&gt;.first(&lt;span class=&quot;sy&quot;&gt;:name&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;elvis&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&amp;gt;&amp;gt; the_king.alive? &lt;span class=&quot;c&quot;&gt;# =&amp;gt; maybe&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is very similar to &lt;code&gt;script/console&lt;/code&gt; in Rails or &lt;code&gt;merb -i&lt;/code&gt; in Merb, only it won&amp;#8217;t load up the entire environment of your application, just your DataMapper resources and their associations, methods, and such.  If you prefer &amp;#8220;fat models&amp;#8221;, this will constitute the core of your application.&lt;/p&gt;
&lt;h2&gt;How This All Comes Together&lt;/h2&gt;
&lt;p&gt;This is the coolest new feature of DataMapper: we&amp;#8217;re skipping all the way from 0.3.0 to 0.9! Get excited, contact the press, fire up the blogosphere!  Its a huge jump and we&amp;#8217;re honestly concerned that people may not be able to handle it.&lt;/p&gt;
&lt;p&gt;Alright, so it&amp;#8217;s not &lt;em&gt;that&lt;/em&gt; big of a deal, but we&amp;#8217;re confident that all of this will get DataMapper so close to going 1.0 that we&amp;#8217;ll be able to taste it.  To get there, DataMapper&amp;#8217;s more advanced features like single table inheritance, paranoia, and chained associations will be re-implimented to use all this new stuff, and then we&amp;#8217;re sure 0.9 will need a touch up or two.&lt;/p&gt;
&lt;p&gt;So close&amp;#8230;.so very very close&amp;#8230;&lt;/p&gt;
&lt;p&gt;Stay tuned in to the &lt;a href=&quot;http://groups.google.com/group/datamapper&quot;&gt;mailing list&lt;/a&gt;, check up on the &lt;a href=&quot;http://datamapper.org/&quot;&gt;wiki&lt;/a&gt;, chat it up in &lt;a href=&quot;irc://irc.freenode.net/#datamapper&quot;&gt;#datamapper&lt;/a&gt; and watch &lt;a href=&quot;http://github.com/datamapper/dm-core/commits/master&quot;&gt;github commit messages&lt;/a&gt; for updates.&lt;/p&gt;</content>
  </entry>
  
</feed>
