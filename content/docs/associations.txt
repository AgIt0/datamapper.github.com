--- 
title:      Associations
body_id:    docs
created_at: Tue Dec 04 14:46:32 +1030 2007
filter:
  - erb
  - textile
--- 

h1. <%= @page.title %>

Associations are a way of declaring relationships between models, for example a blog Post "has many" Comments, or a Post belongs to an Author. They add a series of methods to your models which allow you to create relationships and retrieve related models along with a few other useful features. Which records are related to which are determined by their foreign keys.

The types of associations currently in DataMapper are:

<table summary="Associations">
  <thead>
    <tr>
      <td>ActiveRecord Terminology</td>
      <td>DataMapepr 0.9 Terminology</td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>has_many</td>
      <td>has n</td>
    </tr>
    <tr>
      <td>has_one</td>
      <td>has 1</td>
    </tr>
    <tr>
      <td>belongs_to</td>
      <td>belongs_to, many_to_one</td>
    </tr>
    <tr>
      <td>has_and_belongs_to_many</td>
      <td>has :association => :join_table</td>
    </tr>
    <tr>
      <td>has_many :association, :through => Model</td>
      <td>has :association => :model</td>
    </tr>
  </tbody>
</table>

h2. Declaring Associations

This is done via declarations inside your model class. The class name of the related model is determined by the symbol you pass in. For illustration, we'll add an association of each type. Pay attention to the pluralization or the related model's name.


<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
class Post < DataMapper::Base
  has n, :comments
  has :categories => :categories_posts
  belongs_to :author
end
<% end %>


h2. Customizing Associations

The association declarations make certain assumptions about which classes are being related and the names of foreign keys based on some simple conventions. In some situations you may need to tweak them a little. The association declarations accept additional options to allow you to customize them as you need

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
class Post < DataMapper::Base
  belongs_to :author, :class_name => 'User', :child_key => [:post_id]
end
<% end %>

h2. Finders off Associations

When you call an association off of a model, internally DataMapper creates a Query object which it then executes when you start iterating or call @length@ off of. But if you instead call @.all@ or @.first@ off of the association and provide it the exact same arguments as a regular @all@ and @first@, it merges the new query with the query from the association and hands you back a requested subset of the association's query results.  

In a way, it acts like a database view in that respect.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
@post = Post.first
@post.categories # returns the full association
@post.categories.all(:limit => 10, :order => [:name.asc]) # return the first 10 categories ordered by name
<% end %>



