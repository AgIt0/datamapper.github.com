--- 
title:      Callbacks
body_id:    docs
created_at: Fri Nov 30 15:29:01 +1030 2007
filter:
  - erb
  - textile
--- 

h1. <%= @page.title %>

DataMapper supports callbacks using an "aspect-oriented approach":http://en.wikipedia.org/wiki/Aspect_oriented.  You can define callbacks for any method as well as any class method arbitrarily.  

h2. Adding Instance-Level Advice

To declare advice (callback) for a specific method, first define a new method to be run when another is called, then define your point-cut.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
class Post
  include DataMapper::Resource
  
  before :save, :categorize
  
  def categorize
  # ... code here
  end
end
<% end %>

Alternatively, you can declare the advice during the point-cut by supplying a block rather than a symbol representing a method.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
class Post
  include DataMapper::Resource
  
  before :save do
    # ... code here
  end
  
end
<% end %>

h2. Adding Class-Level Advice

To install advice around a class method, use @before_class_method@ or @after_class_method@:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
class Post
  include DataMapper::Resource

  before_class_method :find, :prepare
  
  def self.prepare
    # ... code here
  end
end
<% end %>

Class level advice does not have access to any resulting instances from the class method, so they might not be the best fit for @after_create@ or @after_save@.


h2. True to Go, False to Stop

Advace have to return true otherwise the relevant action will be halted. For example if you use a before_save callback and fail to return true, the record will not save. 

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
class Post < DataMapper::Base
  # This record will save properly
  before_save do |post|
    true
  end
  
  # But it will not be destroyed
  before_destroy do |post|
    false
  end
end
<% end %>