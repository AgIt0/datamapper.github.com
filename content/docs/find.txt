--- 
title:      Finding Records
body_id:    docs
created_at: Tue Dec 04 14:46:32 +1030 2007
filter:
  - erb
  - textile
--- 

h1. <%= @page.title %>

The finder methods for DataMapper objects are defined in <%= doc('DataMapper::Repository') %>. They include @[]@, @all()@, @first()@

h2. Finder Methods

DataMapper has methods which allow you to grab a single record by key, the first match to a set of conditions, or a collection of records matching conditions.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
zoo   = Zoo.get(1)                        # get the zoo with primary key of 1.
zoo   = Zoo.get!(1)                       # Or get! if you want an ObjectNotFoundError on failure
zoo   = Zoo.get('DFW')                    # wow, support for natural primary keys
zoo   = Zoo.get('Metro', 'DFW')           # more wow, composite key look-up
zoo   = Zoo.first(:name => 'Luke')        # first matching record with the name 'Luke'
zoos  = Zoo.all                           # all zoos
zoos  = Zoo.all(:open => true)            # all zoos that are open
zoos  = Zoo.all(:opened_on => start..end) # all zoos that opened on a date in the date-range
<% end %>

h2. Conditions

Rather than defining conditions using SQL fragments, we can actually specify conditions using a hash.

The examples above are pretty simple, but you might be wondering how we can specify conditions beyond equality without resorting to SQL. Well, thanks to some clever additions to the Symbol class, it's easy!

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
exhibitions = Exibition.all(:run_time.gt => 2, :run_time.lt => 5)
# => SQL conditions: 'run_time > 1 AND run_time < 5'
<% end %>

Valid symbol operators for the conditions are:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
gt    # greater than
lt    # less than
gte   # greater than or equal
lte   # less than or equal
not   # not equal
eql   # equal
like  # like
in    # in - will be used automatically when an array is passed in as an argument
<% end %>

h2. Order

To specify the order in which your results are to be sorted, use:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
Zoo.all(:order => [:tiger_count.desc])
<% end %>

Available order vectors are:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
asc  # sorting ascending
desc # sorting descending
<% end %>

h3. Compatibility

DataMapper supports other conditions syntaxes as well:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
zoos = Zoo.all(:conditions => {:id => 34})
zoos = Zoo.all(:conditions => ["id = ?", 34])

# even mix and match
zoos = Zoo.all(:conditions => {:id => 34}, :name.like => '%foo%')
<% end %>

h2. Talking directly to your data-store

Sometimes you may find that you need to tweak a query manually. 

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
zoos = repository(:default).adapter.query('SELECT name, open FROM zoos WHERE open = 1')
#      Note that this will not return Zoo objects, rather the raw data straight from the database
<% end %>

@zoos@ will be full of Struct objects with @name@, and @open@ attributes, rather than instances of the Zoo class.  They'll also be read-only. You can still use the interpolated array condition syntax as well:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
zoos = repository(:default).adapter.query('SELECT name, open FROM zoos WHERE name = ?', "Awesome Zoo")
<% end %>

h2. Counting

With DM-More's DM-Aggregates included, the @count@ method it adds will returns an integer of the number of records matching the every condition you pass in.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
count = Zoo.count(:age.gt => 200) #=> 2
<% end %>
