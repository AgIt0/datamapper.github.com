--- 
title:      Documentation
body_id:    docs
created_at: Fri Nov 30 15:29:01 +1030 2007
filter:
  - erb
  - textile
--- 

h1. <%= @page.title %>

<dl>
  <dt><a href="http://datamapper.rubyforge.org/">API</a></dt>
  <dd>The API for the current gem release.</dd>
  <dt><a href="/why.html">Why DataMapper?</a></dt>
  <dd>If you haven't read this yet, you should, right now!</dd>
  <dt><a href="/getting_started.html">Getting Started</a></dt>
  <dd>A whirlwind tour of DM. This is the place to start if you haven't used the library before.</dd>
  <dt><a href="/docs/install.html">Common installation issues</a></dt>
  <dd>Troubleshooting installation, with instructions for specific platforms.</dd>
  <dt><a href="/docs/properties.html">Properties</a></dt>
  <dd>Properties declared in your model map to the fields in the database.</dd>
  <dt><a href="/docs/create_and_destroy.html">Creating, Saving and Destroying Records</a></dt>
  <dd>Obviously you're going to be doing a lot of this :)</dd>
  <dt><a href="/docs/find.html">Finding and Counting Records</a></dt>
  <dd>There are lots of nice ways to find records, including some found in the ActiveRecord impersonation module.</dd>
  <dt><a href="/docs/associations.html">Associations</a></dt>
  <dd>Models can be associated to each other in various ways -- has_many, belongs_to, has_and_belongs_to_many</dd>
  <dt><a href="/docs/callbacks.html">Callbacks</a></dt>
  <dd>Callbacks allow you to call your own code each time a record is created, validated and saved if you need.</dd>
  <dt><a href="/docs/misc.html">Misc. Features</a></dt>
  <dd>Paranoia, Single Table Inheritance, Multiple Database Connections, and Chained Associations</dd>
</dl>

h1. Documentarians Wanted!

Want to help DataMapper, but don't know where to start?  A great way to contribute is to help out in the documentation effort.  

h2. Documentation Style

We've decided to follow the Merb documentation as Yehuda Katz outlined in his blog entry "Merb.next":http://yehudakatz.com/2008/01/14/merbnext/.  Here's a brief sample:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
# Render the specified item, with the specified options.
 #
 # ==== Parameters
 # thing<String, Symbol, nil>::
 #   The thing to render. This will default to the current action
 # opts<Hash>:: An options hash (see below)
 #
 # ==== Options (opts)
 # :format<Symbol>:: A registered mime-type format
 # :template<String>::
 #   The path to the template relative to the template root
 # :status<~to_i>::
 #   The status to send to the client. Typically, this would
 #   be an integer (200), or a Merb status code (Accepted)
 # :layout<~to_s>::
 #   A layout to use instead of the default. This should be
 #   relative to the layout root. By default, the layout will
 #   be either the controller_name or application. If you
 #   want to use an alternative content-type than the one
 #   that the base template was rendered as, you will need
 #   to do :layout => “foo.#{content_type}” (i.e. “foo.json”)
 #
 # ==== Returns
 # String:: The rendered template, including layout, if appropriate.
 #
 # ==== Raises
 # TemplateNotFound::
 #   There is no template for the specified location.
 #
 # ==== Alternatives
 # If you pass a Hash as the first parameter, it will be moved to
 # opts and "thing" will be the current action
 #
 #—
 # @public
 def render(thing = nil, opts = {})
   ....
 end
<% end %>

p(attribution). snipped from "http://yehudakatz.com/2008/01/14/merbnext/":http://yehudakatz.com/2008/01/14/merbnext/

h3. Parameters

*Parameters* provides the full method signature, describing the possible arguments of the method in the order they should be specified.  Indicate the expected data-types by writing the acceptable types in a @<Class>@ right next to the argument.

h3. Options

*Options* fleshes out any of the provided options (passed in as if it was named parameters) and what their uses are.  @<~to_i_>@ indicates the method that the object must be able to receive, in this case the @:to_i@ method.

h3. Returns

*Returns* describes the possible return values of the method, indicating the @Class@ of the object first, and a small description of the output.

h3. Raises

*Raises* outlines the possible exceptions that could be raised from within the method and they're exact meaning in the context of the execution of the method.

h3. Alternatives

*Alternatives* briefly describes any funky behavior, catch-alls, or quirks of the method.  In this case, the method will handle a hash as the first argument, if no @thing@ is specified.

h3. Public, Semi-Public, and Private

At the end of the method documentation, indicate they kind of consumption this method is suited for.  *Public* methods are part of the public API for DataMapper, *Semi-Public* are methods which are used in other parts of DataMapper and likely the spec's as well, and *Private* API consists of methods which are internal to DataMapper and can be changed or reimplimented at will, so long as spec's continue to pass.

For a full explanation of this documentation style, visit "http://yehudakatz.com/2008/01/14/merbnext/":http://yehudakatz.com/2008/01/14/merbnext/.


<div class="puff">

h2. Contribute a "Spotlight On..." Article
  
Got something important to say?  Want something explained a little<br>
better or demonstrated? Contribute or request a "Spotlight On..." <br> article! 
Email the "DataMapper Mailing List":http://groups.google.com/group/datamapper with the request or <br>
contribution and we'll post it here.

</div>

