--- 
page_id:    gettingStarted
title:      Getting started with DataMapper
created_at: Wed Aug 29 20:36:53 +0930 2007
filter:
  - erb
  - textile
--- 

h1. <%= @page.title %>

First, if you think you might need some help, there's an active community supporting DataMapper through "the mailing list":http://groups.google.com/group/datamapper and the @#datamapper@ IRC channel on irc.freenode.net.

So lets imagine we're setting up some models for a blogging app. We'll keep it nice and simple. The first thing to decide on is what models we want. Post is a given. So is Comment. But let's mix it up and do Category too.

h2. Install DataMapper

If you have RubyGems installed, pop open your console and install a few things. (Substitute @do_mysql@ with @do_postgres@ if you're into Postgres)

<% coderay(:lang => "bash", :line_numbers => "inline") do -%>
gem install data_objects do_sqlite3 do_mysql dm-core
<% end %>

h2. Require it in your application

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
require 'rubygems'
gem 'dm-core'
require 'dm-core'
<% end %>

h2. Specify your database connection

You need make sure this is set before you define your models.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  # An in-memory Sqlite3 connection:
  DataMapper.setup(:default, 'sqlite3::memory:')
  # A MySQL 4.x+ connection:
  DataMapper.setup(:default, 'mysql://localhost/dm_core_test')
  # A Postgres 8.2+ connection:
  DataMapper.setup(:default, 'postgres://localhost/dm_core_test')
<% end %>

h2. Define your models

The Post model is going to need to be persistent, so we'll include <%= doc('DataMapper::Resource') %>. The convention with model names is to use the singular, not plural version...but that's just the convention, you can do whatever you want.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
class Post
  include DataMapper::Resource
  property :id,         Integer, :serial => true
  property :title,      String
  property :body,       Text
  property :created_at, DateTime
end

class Comment
  include DataMapper::Resource
  property :id,         Integer, :serial => true
  
  property :posted_by,  String
  property :email,      String
  property :url,        String
  property :body,       Text
end

class Category
  include DataMapper::Resource
  property :id,         Integer, :serial => true
  property :name,       String
end

<% end %>

h2. Associations

Ideally, these declarations should be done inside your class definition with the properties and things, but for demonstration purposes, we're just going to crack open the classes.

h3. One To Many

Posts can have comments, so we'll need to setup a simple one-to-many association between then:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
class Post
  has n, :comments
end

class Comment
  belongs_to :post
end
<% end %>

h3. Has and belongs to many

Categories can have many Posts and Posts can have many Categories, so we'll need a 1:N:1 relationships commonly referred to "has and belongs to many".  We'll setup a quick model to wrap our join table between the two so that we can record a little bit of meta-data about when the post was categorized into a category.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
class Categorization
  include DataMapper::Resource
  property :id,         Integer, :serial => true
  
  property :created_at, DateTime
  
  belongs_to :category
  belongs_to :post
end

# Now we re-open our Post and Categories classes to define associations
class Post
  has n, :categorizations
  has n, :categories, :through => :categorizations
end

class Category
  has n, :categorizations
  has n, :posts,      :through => :categorizations
end

<% end %>

h2. Set up your database tables

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
Post.auto_migrate!
Category.auto_migrate!
Comment.auto_migrate!
Categorization.auto_migrate!
<% end %>

This will issue the necessary CREATE statements to define each storage according to their properties.

You could also do:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
DataMapper.auto_migrate!
<% end %>
