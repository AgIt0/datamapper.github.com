--- 
page_id:    gettingStarted
title:      Getting started with DataMapper
created_at: Wed Aug 29 20:36:53 +0930 2007
filter:
  - erb
  - textile
--- 

h1. <%= @page.title %>

First, if you think you might need some help, there's an active community supporting DataMapper through "the mailing list":http://groups.google.com/group/datamapper and the @#datamapper@ IRC channel on irc.freenode.net.

So lets imagine we're setting up some models for a blogging app. We'll keep it nice and simple. The first thing to decide on is what models we want. Post is a given. So is Comment. But let's mix it up and do Category too.

h2. Install DataMapper

If you have RubyGems installed, pop open your console and install a few things. (Substitute @do_mysql@ with @do_postgres@ if your into Postgres)

<% coderay(:lang => "bash", :line_numbers => "inline") do -%>
gem sources -a http://gems.datamapper.org
gem install data_objects do_sqlite3 do_mysql dm-core dm-more
<% end %>

h2. Require it in your application

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
require 'rubygems'
gem 'dm-core'
require 'data_mapper'
<% end %>

h2. Specify your database connection

You need make sure this is set before you define your models.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  # An in-memory Sqlite3 connection:
  DataMapper.setup(:default, 'sqlite3::memory:')
  # A MySQL 4.x+ connection:
  DataMapper.setup(:default, 'mysql://localhost/dm_core_test')
  # A Postgres 8.2+ connection:
  DataMapper.setup(:default, 'postgres://localhost/dm_core_test')
<% end %>

h2. Define your models

The Post model is going to need to be persistent, so we'll include DataMapper::Resource. The convention with model names is to use the singular, not plural version...but that's just the convention, you can do whatever you want.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
class Post
  include DataMapper::Resource
  property :id,         Integer, :serial => true
  property :title,      String
  property :body,       Text
  property :created_at, DateTime
end
<% end %>

h3. Associations

We want to associate the posts with the categories and comments. Categories can have many Posts and Posts can have many Categories.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
class Category
  include DataMapper::Resource
  property :id,   Integer, :serial => true
  property :name, String

  has :posts => :categories_posts
end

class Comment
  include DataMapper::Resource
  property :id,         Integer, :serial => true
  
  property :posted_by,  String
  property :email,      String
  property :url,        String
  property :body,       Text

  belongs_to :post
end

# Now we re-open our Post class to define the associations.  
# This would be best included in with the original definition 
# of the class, but for the purposes of our demo, this'll do.
class Post
  has n, :comments
  has :categories => :categories_posts
end
<% end %>

h2. Set up your database tables

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
Post.auto_migrate!
Category.auto_migrate!
Comment.auto_migrate!
<% end %>

This will issue the necessary CREATE statements to define each storage according to their properties.

You could also do:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
DataMapper::Resource.auto_migrate!
<% end %>